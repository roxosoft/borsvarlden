@using borsvarlden.ViewModels;
@using borsvarlden.Helpers;
@model PaggingSearchResponseViewModel<NewsViewModel>;
@{
    ViewData["Title"] = $"Artiklar - Sida {Model.CurrentPage} av {Model.PageCount}";
}

@section Styles{
    <link rel="stylesheet" href="~/css/article.min.css" />
    <link rel="stylesheet" href="~/css/news-list.min.css" />
    <link rel="stylesheet" href="https://borsvarlden-banners.azurewebsites.net/revslider/public/assets/css/settings.css" type="text/css" media="all" />
}

@section ScriptsHead {
    <script type="text/javascript" src="https://borsvarlden-banners.azurewebsites.net/assets/js/includes/jquery/jquery.js"></script>
    <script type="text/javascript" src="https://borsvarlden-banners.azurewebsites.net/revslider/public/assets/js/jquery.themepunch.tools.min.js"></script>
    <script type="text/javascript" src="https://borsvarlden-banners.azurewebsites.net/revslider/public/assets/js/jquery.themepunch.revolution.min.js"></script>
}

<div class="row index-row">
    <div class="col-10 index-content-wrapper news-list-banner-parent">
        <div class="column-label annons-label">ANNONS</div>
        @await Component.InvokeAsync("BannerTop")
        <div class="row bv-container-page" style="margin-top:15px">
            <div class="col-xs-12 bv-content-left">
                <div class="search">
                    @using (Html.BeginForm("NewsList", "Home", new { page = 1 }, FormMethod.Post, false, new { placeholder = "Sök artiklar", @class = "search-form" }))
                    {
                        @Html.TextBoxFor(m => m.SearchText, null, new { @class = "form-control search-text" })
                        <span class="submit-search">
                            <button type="submit">
                                <span class="fa fa-search">
                                </span>
                            </button>
                        </span>
                    }
                </div>
                <div class="index-article-feed">
                    @foreach (var news in Model.Data)
                    {
                        <div class="small-block article">
                            @await Html.PartialAsync("_Article", news)
                        </div>
                    }

                    @if (Model.PageCount > 1)
                    {
                        <div class="pager">
                            @if (Model.CurrentPage > 3)
                            {
                                <a class="page" href="~/artiklar/sida/1">« Första</a>
                            }
                            @if (Model.CurrentPage != 1)
                            {
                                <a class="page" href="~/artiklar/sida/@Html.Raw(@Model.CurrentPage-1)">←</a>
                            }

                            @{
                                PaginationHelper.CalcutatePagerSize(Model.CurrentPage, Model.PageCount, out int pagerFirstPageNumber, out int pagerLastPageNumber);

                                for (int index = pagerFirstPageNumber; index <= pagerLastPageNumber; index++)
                                {
                                    @if (index == Model.CurrentPage)
                                     {
                                         <span class="page current">@index</span>
                                         continue;
                                     }

                                    <a class="page" href="~/artiklar/sida/@Html.Raw(@index)">@index</a>
                                }
                            }

                            @if (Model.CurrentPage != Model.PageCount)
                            {
                                <a class="page" href="~/artiklar/sida/@Html.Raw(@Model.CurrentPage + 1)">→</a>
                            }
                            @if (Model.PageCount - Model.CurrentPage > 2)
                            {
                                <a class="page" href="~/artiklar/sida/@Html.Raw(@Model.PageCount)">Sista</a>
                            }
                        </div>
                    }
                </div>

                <div class="content-botom-hidden">
                    @await Component.InvokeAsync("SponsoredNews")
                    @await Component.InvokeAsync("LatestNews")
                </div>
            </div>
            <div class="col-xs-12 bv-content-right">
                @await Component.InvokeAsync("SponsoredNews")
                @await Component.InvokeAsync("MostReadNews")
                @await Component.InvokeAsync("LatestNews")
            </div>
        </div>
    </div>
    <div class="col-2 index-side-banner-wrapper visible-lg">
        @await Component.InvokeAsync("BannerRight")
    </div>
</div>

@section Scripts{ }
